import React, { useEffect, useState, useContext } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { AppContext } from "../context/AppContext";
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import {
  Loader2,
  Building2,
  Mail,
  Phone,
  Globe,
  MapPin,
  User,
  Info,
  Briefcase,
} from "lucide-react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { FiTrash2 } from "react-icons/fi";

const placeholderImage =
  "https://cdn-icons-png.freepik.com/256/11680/11680860.png?semt=ais_white_label";

const ManufacturerDetails = () => {
  const { backendUrl } = useContext(AppContext);
  const { id } = useParams();
  const navigate = useNavigate();

  const [manufacturer, setManufacturer] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchManufacturer = async () => {
      try {
        const res = await axios.get(`${backendUrl}/api/manufacturer/${id}`);
        if (res.data.success) setManufacturer(res.data.manufacturer);
        else toast.error("Manufacturer not found");
      } catch (err) {
        toast.error(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchManufacturer();
  }, [id, backendUrl]);

  const handleDownloadPDF = () => {
    if (!manufacturer) return;

    const doc = new jsPDF("p", "mm", "a4");

    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Manufacturer Report", 105, 20, { align: "center" });

    let y = 30;

    // Add image
    if (manufacturer.image) {
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.src = manufacturer.image;
      img.onload = () => {
        doc.addImage(img, "JPEG", 65, 30, 80, 60);
        y = 100;
        addContent(doc, y);
      };
      img.onerror = () => addContent(doc, y);
    } else {
      addContent(doc, y);
    }

    function addContent(doc, yStart) {
      let yPos = yStart + 10;
      doc.setFont("helvetica", "normal");
      doc.setFontSize(13);

      doc.text(`Name: ${manufacturer.name || "N/A"}`, 20, yPos);
      doc.text(`Country: ${manufacturer.country || "N/A"}`, 20, (yPos += 10));
      doc.text(`Website: ${manufacturer.website || "N/A"}`, 20, (yPos += 10));
      doc.text(`Email: ${manufacturer.email || "N/A"}`, 20, (yPos += 10));
      doc.text(`Phone: ${manufacturer.phone || "N/A"}`, 20, (yPos += 10));
      doc.text(`Address: ${manufacturer.address || "N/A"}`, 20, (yPos += 10));
      doc.text(`Description: ${manufacturer.description || "No description"}`, 20, (yPos += 15), {
        maxWidth: 170,
      });

      if (manufacturer.distributors && manufacturer.distributors.length > 0) {
        autoTable(doc, {
          startY: yPos + 10,
          head: [["Distributor Name", "Email", "Phone", "Country"]],
          body: manufacturer.distributors.map((dist) => [
            dist.name || "-",
            dist.email || "-",
            dist.phone || "-",
            dist.country || "-",
          ]),
          styles: { halign: "center" },
          headStyles: { fillColor: [66, 66, 66], textColor: 255 },
        });
      } else {
        doc.text("No distributors linked to this manufacturer.", 20, yPos + 10);
      }

      doc.setFontSize(10);
      doc.text("Generated by Medical Devices Management System", 105, 285, {
        align: "center",
      });

      doc.save(`Manufacturer_Report_${manufacturer.name}.pdf`);
    }
  };

  const handleDelete = async () => {
    if (!window.confirm("Are you sure you want to delete this manufacturer?"))
      return;
    try {
      await axios.delete(`${backendUrl}/api/manufacturer/${id}`);
      toast.success("Manufacturer deleted successfully");
      navigate("/manufacturer");
    } catch (err) {
      toast.error(err.message);
    }
  };

  if (loading)
    return (
      <div className="flex justify-center items-center h-80 text-gray-500">
        <Loader2 className="animate-spin w-6 h-6 mr-2" /> Loading manufacturer
        details...
      </div>
    );

  if (!manufacturer)
    return (
      <p className="text-center mt-10 text-gray-600">
        Manufacturer not found
      </p>
    );

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-5xl mx-auto my-12 mt-30 p-8 bg-white rounded-2xl shadow-lg"
    >
      {/* Header */}
      <div className="flex flex-col-reverse md:flex-row items-center justify-between gap-4 mb-8 border-b pb-4">
        <div className="flex items-center gap-2">
          <Building2 className="text-blue-600 w-8 h-8" />
          <div>
            <h1 className="text-3xl font-semibold text-gray-800">
              {manufacturer.name}
            </h1>
            <p className="text-gray-500">{manufacturer.country}</p>
          </div>
        </div>
        <div className="flex-1 flex justify-center items-center">
          <img
            src={manufacturer.image || placeholderImage}
            alt={manufacturer.name}
            onError={(e) => (e.target.src = placeholderImage)}
            className="w-full max-w-sm h-auto rounded-xl object-cover shadow-md"
          />
        </div>
      </div>

      {/* Info */}
      <div className="grid md:grid-cols-2 gap-8 mb-8">
        <div className="space-y-2">
          <h2 className="font-semibold text-lg text-gray-700 flex items-center gap-2">
            <Info className="w-5 h-5 text-blue-500" /> General Information
          </h2>
          <p>
            <strong>Has Agent:</strong>{" "}
            {manufacturer.has_agent ? manufacturer.agent || "Yes" : "No"}
          </p>
          <p>
            <strong>Description:</strong>{" "}
            {manufacturer.description || "No description"}
          </p>
        </div>

        <div className="space-y-2">
          <h2 className="font-semibold text-lg text-gray-700 flex items-center gap-2">
            <User className="w-5 h-5 text-blue-500" /> Contact Information
          </h2>
          <p>
            <strong>Name:</strong> {manufacturer.contact_name || "N/A"}
          </p>
          <p>
            <strong>Position:</strong> {manufacturer.position || "N/A"}
          </p>
          <p className="flex items-center gap-2 ">
            <Mail className="w-4 h-4" /> {manufacturer.email || "No email"}
          </p>
          <p className="flex items-center gap-2 ">
            <Phone className="w-4 h-4" /> {manufacturer.mobile || "No mobile"}
          </p>
          <p className="flex items-center gap-2 ">
            <strong>Telephone:</strong> {manufacturer.telephone || "N/A"}
          </p>
          <p className="flex items-center gap-2 ">
            <MapPin className="w-4 h-4" /> {manufacturer.address || "No address"}
          </p>
          <p className="flex items-center gap-2 ">
            <Globe className="w-4 h-4" /> {manufacturer.website || "No website"}
          </p>
        </div>
      </div>

      {/* Distributors */}
      {manufacturer.distributors && manufacturer.distributors.length > 0 && (
        <div className="bg-gray-50 p-6 rounded-xl shadow-inner">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            Distributor(s)
          </h2>
          <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {manufacturer.distributors.map((s) => (
              <div
                onClick={() => navigate(`/supplier/${s._id}`)}
                key={s._id}
                className="p-5 border cursor-pointer border-gray-200 bg-white rounded-xl hover:shadow-lg transition"
              >
                <h3 className="text-xl font-semibold text-blue-700 mb-3 flex items-center gap-2">
                  <Briefcase className="w-5 h-5 text-blue-600" />
                  {s.name}
                </h3>
                <div className="space-y-1 text-gray-700">
                  <p>
                    <strong>Email:</strong> {s.email || "N/A"}
                  </p>
                  <p>
                    <strong>Phone:</strong> {s.phone || "N/A"}
                  </p>
                  <p>
                    <strong>Address:</strong> {s.address || "N/A"}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Buttons */}
      <div className="flex flex-wrap justify-end gap-4 mt-8">
        <button
          onClick={() => navigate(`/edit-manufacturer/${id}`)}
          className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-400 transition"
        >
          Edit
        </button>
        <button
          onClick={() => handleDelete(id)}
          className=" flex items-center justify-center gap-2 px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-500 transition"
        >
          <FiTrash2 /> Delete
        </button>
        <button
          onClick={handleDownloadPDF}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition"
        >
          Download PDF
        </button>
        <button
          onClick={() => navigate("/manufacturer")}
          className="px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition"
        >
          Back
        </button>
      </div>
    </motion.div>
  );
};

export default ManufacturerDetails;
